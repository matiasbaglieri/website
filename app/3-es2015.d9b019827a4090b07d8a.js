(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{NxW9:function(t,e,i){"use strict";i.d(e,"a",(function(){return c})),i.d(e,"b",(function(){return y})),i.d(e,"c",(function(){return x}));var s=i("fXoL"),o=i("ofXK");const r=["cropcanvas"],n=["fileInput"];function a(t,e){if(1&t){const t=s["\u0275\u0275getCurrentView"]();s["\u0275\u0275elementStart"](0,"input",4,5),s["\u0275\u0275listener"]("change",(function(e){return s["\u0275\u0275restoreView"](t),s["\u0275\u0275nextContext"]().fileChangeListener(e)})),s["\u0275\u0275elementEnd"]()}}class h{constructor(t){this.lineDash=!1,this.strokeWidth=1,this.strokeColor="rgba(255,255,255,1)",this.fillColor="rgba(255,255,255,1)",this.dragIconStrokeWidth=1,this.dragIconStrokeColor="rgba(0,0,0,1)",this.dragIconFillColor="rgba(255,255,255,1)",this.backgroundFillColor="rgba(0,0,0,0.6)","object"==typeof t&&(this.lineDash=t.lineDash||this.lineDash,this.strokeWidth=t.strokeWidth||this.strokeWidth,this.fillColor=t.fillColor||this.fillColor,this.strokeColor=t.strokeColor||this.strokeColor,this.dragIconStrokeWidth=t.dragIconStrokeWidth||this.dragIconStrokeWidth,this.dragIconStrokeColor=t.dragIconStrokeColor||this.dragIconStrokeColor,this.dragIconFillColor=t.dragIconFillColor||this.dragIconFillColor,this.backgroundFillColor=t.backgroundFillColor||this.backgroundFillColor)}}class c{constructor(t){this.canvasWidth=300,this.canvasHeight=300,this.dynamicSizing=!1,this.width=200,this.height=200,this.minWidth=50,this.minHeight=50,this.minWithRelativeToResolution=!0,this.croppedWidth=100,this.croppedHeight=100,this.cropperDrawSettings=new h,this.touchRadius=20,this.noFileInput=!1,this.markerSizeMultiplier=1,this.centerTouchRadius=20,this.showCenterMarker=!0,this.allowedFilesRegex=/\.(jpe?g|png|gif|bmp)$/i,this.cropOnResize=!0,this.preserveSize=!1,this.compressRatio=1,this._rounded=!1,this._keepAspect=!0,"object"==typeof t&&Object.assign(this,t)}set rounded(t){this._rounded=t,t&&(this._keepAspect=!0)}get rounded(){return this._rounded}set keepAspect(t){this._keepAspect=t,!0===this._rounded&&!1===this._keepAspect&&(console.error("Cannot set keep aspect to false on rounded cropper. Ellipsis not supported"),this._keepAspect=!0)}get keepAspect(){return this._keepAspect}}class p extends Number{}class g{constructor(){this.debug=!1,this.IptcFieldMap={120:"caption",110:"credit",25:"keywords",55:"dateCreated",80:"byline",85:"bylineTitle",122:"captionWriter",105:"headline",116:"copyright",15:"category"},this.Tags={36864:"ExifVersion",40960:"FlashpixVersion",40961:"ColorSpace",40962:"PixelXDimension",40963:"PixelYDimension",37121:"ComponentsConfiguration",37122:"CompressedBitsPerPixel",37500:"MakerNote",37510:"UserComment",40964:"RelatedSoundFile",36867:"DateTimeOriginal",36868:"DateTimeDigitized",37520:"SubsecTime",37521:"SubsecTimeOriginal",37522:"SubsecTimeDigitized",33434:"ExposureTime",33437:"FNumber",34850:"ExposureProgram",34852:"SpectralSensitivity",34855:"ISOSpeedRatings",34856:"OECF",37377:"ShutterSpeedValue",37378:"ApertureValue",37379:"BrightnessValue",37380:"ExposureBias",37381:"MaxApertureValue",37382:"SubjectDistance",37383:"MeteringMode",37384:"LightSource",37385:"Flash",37396:"SubjectArea",37386:"FocalLength",41483:"FlashEnergy",41484:"SpatialFrequencyResponse",41486:"FocalPlaneXResolution",41487:"FocalPlaneYResolution",41488:"FocalPlaneResolutionUnit",41492:"SubjectLocation",41493:"ExposureIndex",41495:"SensingMethod",41728:"FileSource",41729:"SceneType",41730:"CFAPattern",41985:"CustomRendered",41986:"ExposureMode",41987:"WhiteBalance",41988:"DigitalZoomRation",41989:"FocalLengthIn35mmFilm",41990:"SceneCaptureType",41991:"GainControl",41992:"Contrast",41993:"Saturation",41994:"Sharpness",41995:"DeviceSettingDescription",41996:"SubjectDistanceRange",40965:"InteroperabilityIFDPointer",42016:"ImageUniqueID"},this.TiffTags={256:"ImageWidth",257:"ImageHeight",34665:"ExifIFDPointer",34853:"GPSInfoIFDPointer",40965:"InteroperabilityIFDPointer",258:"BitsPerSample",259:"Compression",262:"PhotometricInterpretation",274:"Orientation",277:"SamplesPerPixel",284:"PlanarConfiguration",530:"YCbCrSubSampling",531:"YCbCrPositioning",282:"XResolution",283:"YResolution",296:"ResolutionUnit",273:"StripOffsets",278:"RowsPerStrip",279:"StripByteCounts",513:"JPEGInterchangeFormat",514:"JPEGInterchangeFormatLength",301:"TransferFunction",318:"WhitePoint",319:"PrimaryChromaticities",529:"YCbCrCoefficients",532:"ReferenceBlackWhite",306:"DateTime",270:"ImageDescription",271:"Make",272:"Model",305:"Software",315:"Artist",33432:"Copyright"},this.GPSTags={0:"GPSVersionID",1:"GPSLatitudeRef",2:"GPSLatitude",3:"GPSLongitudeRef",4:"GPSLongitude",5:"GPSAltitudeRef",6:"GPSAltitude",7:"GPSTimeStamp",8:"GPSSatellites",9:"GPSStatus",10:"GPSMeasureMode",11:"GPSDOP",12:"GPSSpeedRef",13:"GPSSpeed",14:"GPSTrackRef",15:"GPSTrack",16:"GPSImgDirectionRef",17:"GPSImgDirection",18:"GPSMapDatum",19:"GPSDestLatitudeRef",20:"GPSDestLatitude",21:"GPSDestLongitudeRef",22:"GPSDestLongitude",23:"GPSDestBearingRef",24:"GPSDestBearing",25:"GPSDestDistanceRef",26:"GPSDestDistance",27:"GPSProcessingMethod",28:"GPSAreaInformation",29:"GPSDateStamp",30:"GPSDifferential"},this.StringValues={ExposureProgram:{0:"Not defined",1:"Manual",2:"Normal program",3:"Aperture priority",4:"Shutter priority",5:"Creative program",6:"Action program",7:"Portrait mode",8:"Landscape mode"},MeteringMode:{0:"Unknown",1:"Average",2:"CenterWeightedAverage",3:"Spot",4:"MultiSpot",5:"Pattern",6:"Partial",255:"Other"},LightSource:{0:"Unknown",1:"Daylight",2:"Fluorescent",3:"Tungsten (incandescent light)",4:"Flash",9:"Fine weather",10:"Cloudy weather",11:"Shade",12:"Daylight fluorescent (D 5700 - 7100K)",13:"Day white fluorescent (N 4600 - 5400K)",14:"Cool white fluorescent (W 3900 - 4500K)",15:"White fluorescent (WW 3200 - 3700K)",17:"Standard light A",18:"Standard light B",19:"Standard light C",20:"D55",21:"D65",22:"D75",23:"D50",24:"ISO studio tungsten",255:"Other"},Flash:{0:"Flash did not fire",1:"Flash fired",5:"Strobe return light not detected",7:"Strobe return light detected",9:"Flash fired, compulsory flash mode",13:"Flash fired, compulsory flash mode, return light not detected",15:"Flash fired, compulsory flash mode, return light detected",16:"Flash did not fire, compulsory flash mode",24:"Flash did not fire, auto mode",25:"Flash fired, auto mode",29:"Flash fired, auto mode, return light not detected",31:"Flash fired, auto mode, return light detected",32:"No flash function",65:"Flash fired, red-eye reduction mode",69:"Flash fired, red-eye reduction mode, return light not detected",71:"Flash fired, red-eye reduction mode, return light detected",73:"Flash fired, compulsory flash mode, red-eye reduction mode",77:"Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected",79:"Flash fired, compulsory flash mode, red-eye reduction mode, return light detected",89:"Flash fired, auto mode, red-eye reduction mode",93:"Flash fired, auto mode, return light not detected, red-eye reduction mode",95:"Flash fired, auto mode, return light detected, red-eye reduction mode"},SensingMethod:{1:"Not defined",2:"One-chip color area sensor",3:"Two-chip color area sensor",4:"Three-chip color area sensor",5:"Color sequential area sensor",7:"Trilinear sensor",8:"Color sequential linear sensor"},SceneCaptureType:{0:"Standard",1:"Landscape",2:"Portrait",3:"Night scene"},SceneType:{1:"Directly photographed"},CustomRendered:{0:"Normal process",1:"Custom process"},WhiteBalance:{0:"Auto white balance",1:"Manual white balance"},GainControl:{0:"None",1:"Low gain up",2:"High gain up",3:"Low gain down",4:"High gain down"},Contrast:{0:"Normal",1:"Soft",2:"Hard"},Saturation:{0:"Normal",1:"Low saturation",2:"High saturation"},Sharpness:{0:"Normal",1:"Soft",2:"Hard"},SubjectDistanceRange:{0:"Unknown",1:"Macro",2:"Close view",3:"Distant view"},FileSource:{3:"DSC"},Components:{0:"",1:"Y",2:"Cb",3:"Cr",4:"R",5:"G",6:"B"}}}addEvent(t,e,i){t.addEventListener?t.addEventListener(e,i,!1):t.attachEvent&&t.attachEvent("on"+e,i)}imageHasData(t){return!!t.exifdata}base64ToArrayBuffer(t){t=t.replace(/^data:([^;]+);base64,/gim,"");const e=atob(t),i=e.length,s=new ArrayBuffer(i),o=new Uint8Array(s);for(let r=0;r<i;r++)o[r]=e.charCodeAt(r);return s}objectURLToBlob(t,e){const i=new XMLHttpRequest;i.open("GET",t,!0),i.responseType="blob",i.onload=()=>{200!==i.status&&0!==i.status||e(i.response)},i.send()}getImageData(t,e){const i=i=>{const s=this.findEXIFinJPEG(i),o=this.findIPTCinJPEG(i);t.exifdata=s||{},t.iptcdata=o||{},e&&e.call(t)};if("src"in t&&t.src)if(/^data:/i.test(t.src)){const e=this.base64ToArrayBuffer(t.src);i(e)}else if(/^blob:/i.test(t.src)){const e=new FileReader;e.onload=t=>{i(t.target.result)},this.objectURLToBlob(t.src,t=>{e.readAsArrayBuffer(t)})}else{const e=new XMLHttpRequest;e.onload=()=>{if(200!==e.status&&0!==e.status)throw new Error("Could not load image");i(e.response)},e.open("GET",t.src,!0),e.responseType="arraybuffer",e.send(null)}else if(FileReader&&(t instanceof Blob||t instanceof File)){const e=new FileReader;e.onload=t=>{this.log("Got file of length "+t.target.result.byteLength),i(t.target.result)},e.readAsArrayBuffer(t)}}findEXIFinJPEG(t){const e=new DataView(t);if(this.log("Got file of length "+t.byteLength),255!==e.getUint8(0)||216!==e.getUint8(1))return this.log("Not a valid JPEG"),!1;let i=2;const s=t.byteLength;let o;for(;i<s;){if(255!==e.getUint8(i))return this.log("Not a valid marker at offset "+i+", found: "+e.getUint8(i)),!1;if(o=e.getUint8(i+1),this.log(o),225===o)return this.log("Found 0xFFE1 marker"),this.readEXIFData(e,i+4);i+=2+e.getUint16(i+2)}}findIPTCinJPEG(t){const e=new DataView(t);if(this.log("Got file of length "+t.byteLength),255!==e.getUint8(0)||216!==e.getUint8(1))return this.log("Not a valid JPEG"),!1;let i=2;const s=t.byteLength;for(;i<s;){if(56===(o=e).getUint8(r=i)&&66===o.getUint8(r+1)&&73===o.getUint8(r+2)&&77===o.getUint8(r+3)&&4===o.getUint8(r+4)&&4===o.getUint8(r+5)){let s=e.getUint8(i+7);s%2!=0&&(s+=1),0===s&&(s=4);const o=i+8+s,r=e.getUint16(i+6+s);return this.readIPTCData(t,o,r)}i++}var o,r}readIPTCData(t,e,i){const s=new DataView(t),o={};let r,n,a,h,c,p=e;for(;p<e+i;)28===s.getUint8(p)&&2===s.getUint8(p+1)&&(h=s.getUint8(p+2),h in this.IptcFieldMap&&(a=s.getInt16(p+3),c=a+5,n=this.IptcFieldMap[h],r=this.getStringFromDB(s,p+5,a),o.hasOwnProperty(n)?o[n]instanceof Array?o[n].push(r):o[n]=[o[n],r]:o[n]=r)),p++;return o}readTags(t,e,i,s,o){const r=t.getUint16(i,!o),n={};let a,h;for(let c=0;c<r;c++)a=i+12*c+2,h=s[t.getUint16(a,!o)],h||this.log("Unknown tag: "+t.getUint16(a,!o)),n[h]=this.readTagValue(t,a,e,i,o);return n}readTagValue(t,e,i,s,o){const r=t.getUint16(e+2,!o),n=t.getUint32(e+4,!o),a=t.getUint32(e+8,!o)+i;let h,c,g,l,d,u;switch(r){case 1:case 7:if(1===n)return t.getUint8(e+8,!o);for(h=n>4?a:e+8,c=[],l=0;l<n;l++)c[l]=t.getUint8(h+l);return c;case 2:return h=n>4?a:e+8,this.getStringFromDB(t,h,n-1);case 3:if(1===n)return t.getUint16(e+8,!o);for(h=n>2?a:e+8,c=[],l=0;l<n;l++)c[l]=t.getUint16(h+2*l,!o);return c;case 4:if(1===n)return t.getUint32(e+8,!o);for(c=[],l=0;l<n;l++)c[l]=t.getUint32(a+4*l,!o);return c;case 5:if(1===n)return d=t.getUint32(a,!o),u=t.getUint32(a+4,!o),g=new p(d/u),g.numerator=d,g.denominator=u,g;for(c=[],l=0;l<n;l++)d=t.getUint32(a+8*l,!o),u=t.getUint32(a+4+8*l,!o),c[l]=new p(d/u),c[l].numerator=d,c[l].denominator=u;return c;case 9:if(1===n)return t.getInt32(e+8,!o);for(c=[],l=0;l<n;l++)c[l]=t.getInt32(a+4*l,!o);return c;case 10:if(1===n)return t.getInt32(a,!o)/t.getInt32(a+4,!o);for(c=[],l=0;l<n;l++)c[l]=t.getInt32(a+8*l,!o)/t.getInt32(a+4+8*l,!o);return c}}getStringFromDB(t,e,i){let s="";for(let o=e;o<e+i;o++)s+=String.fromCharCode(t.getUint8(o));return s}readEXIFData(t,e){if("Exif"!==this.getStringFromDB(t,e,4))return this.log("Not valid EXIF data! "+this.getStringFromDB(t,e,4)),!1;let i,s,o,r,n;const a=e+6;if(18761===t.getUint16(a))i=!1;else{if(19789!==t.getUint16(a))return this.log("Not valid TIFF data! (no 0x4949 or 0x4D4D)"),!1;i=!0}if(42!==t.getUint16(a+2,!i))return this.log("Not valid TIFF data! (no 0x002A)"),!1;const h=t.getUint32(a+4,!i);if(h<8)return this.log("Not valid TIFF data! (First offset less than 8)",t.getUint32(a+4,!i)),!1;if(s=this.readTags(t,a,a+h,this.TiffTags,i),s.ExifIFDPointer)for(o in r=this.readTags(t,a,a+s.ExifIFDPointer,this.Tags,i),r)if({}.hasOwnProperty.call(r,o)){switch(o){case"LightSource":case"Flash":case"MeteringMode":case"ExposureProgram":case"SensingMethod":case"SceneCaptureType":case"SceneType":case"CustomRendered":case"WhiteBalance":case"GainControl":case"Contrast":case"Saturation":case"Sharpness":case"SubjectDistanceRange":case"FileSource":r[o]=this.StringValues[o][r[o]];break;case"ExifVersion":case"FlashpixVersion":r[o]=String.fromCharCode(r[o][0],r[o][1],r[o][2],r[o][3]);break;case"ComponentsConfiguration":const t="Components";r[o]=this.StringValues[t][r[o][0]]+this.StringValues[t][r[o][1]]+this.StringValues[t][r[o][2]]+this.StringValues[t][r[o][3]]}s[o]=r[o]}if(s.GPSInfoIFDPointer)for(o in n=this.readTags(t,a,a+s.GPSInfoIFDPointer,this.GPSTags,i),n)if({}.hasOwnProperty.call(n,o)){switch(o){case"GPSVersionID":n[o]=n[o][0]+"."+n[o][1]+"."+n[o][2]+"."+n[o][3]}s[o]=n[o]}return s}checkImageType(t){return t instanceof Image||t instanceof HTMLImageElement}getData(t,e){return!(this.checkImageType(t)&&!t.complete||(this.imageHasData(t)?e&&e.call(t):this.getImageData(t,e),0))}getTag(t,e){if(this.imageHasData(t))return t.exifdata[e]}getAllTags(t){if(!this.imageHasData(t))return{};let e;const i=t.exifdata,s={};for(e in i)i.hasOwnProperty(e)&&(s[e]=i[e]);return s}pretty(t){if(!this.imageHasData(t))return"";let e;const i=t.exifdata;let s="";for(e in i)i.hasOwnProperty(e)&&(s+="object"==typeof i[e]?i[e]instanceof Number?`${e} : ${i[e]} [${i[e].numerator}/${i[e].denominator}]\r\n`:`${e} : [${i[e].length} values]\r\n`:`${e} : ${i[e]}\r\n`);return s}readFromBinaryFile(t){return this.findEXIFinJPEG(t)}log(...t){this.debug&&console.log(t)}}class l{constructor(t=0,e=0){this.x=t,this.y=e}get next(){return this.myNext}set next(t){this.myNext=t}get prev(){return this.myPrev}set prev(t){this.myPrev=t}}class d{constructor(t=1){let e=this.firstAvailable=new l;for(let i=1;i<t;i++){const t=new l;e.next=t,e=t}}get instance(){return this}borrow(t,e){if(null==this.firstAvailable)throw new Error("Pool exhausted");this.borrowed++;const i=this.firstAvailable;return this.firstAvailable=i.next,i.x=t,i.y=e,i}returnPoint(t){this.borrowed--,t.x=0,t.y=0,t.next=this.firstAvailable,this.firstAvailable=t}}class u{constructor(t,e,i,s){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0),void 0===s&&(s=0),this.left=t,this.right=t+i,this.top=e,this.bottom=e+s}get width(){return this.right-this.left}get height(){return this.bottom-this.top}getCentre(){const t=this.width,e=this.height;return(new d).instance.borrow(this.left+t/2,this.top+e/2)}}class m{constructor(t,e,i,s){this.cropperSettings=new c,this.over=!1,this.drag=!1,this._position=new l(t,e),this.offset=new l(0,0),this.radius=i,this.cropperSettings=s}setDrag(t){this.drag=t,this.setOver(t)}draw(t){}setOver(t){this.over=t}touchInBounds(t,e){return t>this.position.x-this.radius+this.offset.x&&t<this.position.x+this.radius+this.offset.x&&e>this.position.y-this.radius+this.offset.y&&e<this.position.y+this.radius+this.offset.y}get position(){return this._position}setPosition(t,e){this._position.x=t,this._position.y=e}}class f extends m{constructor(t,e,i,s){super(t,e,i,s)}drawCornerBorder(t){let e=10;(this.over||this.drag)&&(e=12);let i=this.cropperSettings.markerSizeMultiplier,s=this.cropperSettings.markerSizeMultiplier;this.horizontalNeighbour.position.x<this.position.x&&(i=-this.cropperSettings.markerSizeMultiplier),this.verticalNeighbour.position.y<this.position.y&&(s=-this.cropperSettings.markerSizeMultiplier),t.beginPath(),this.cropperSettings.cropperDrawSettings.lineDash&&t.setLineDash([1,3]),t.lineJoin="miter",t.moveTo(this.position.x+this.offset.x,this.position.y+this.offset.y),t.lineTo(this.position.x+this.offset.x+e*i,this.position.y+this.offset.y),t.lineTo(this.position.x+this.offset.x+e*i,this.position.y+this.offset.y+e*s),t.lineTo(this.position.x+this.offset.x,this.position.y+this.offset.y+e*s),t.lineTo(this.position.x+this.offset.x,this.position.y+this.offset.y),t.closePath(),t.lineWidth=this.cropperSettings.cropperDrawSettings.strokeWidth,t.strokeStyle=this.cropperSettings.cropperDrawSettings.strokeColor||"rgba(255,255,255,.7)",t.stroke()}drawCornerFill(t){let e=10;(this.over||this.drag)&&(e=12);let i=this.cropperSettings.markerSizeMultiplier,s=this.cropperSettings.markerSizeMultiplier;if(this.horizontalNeighbour.position.x<this.position.x&&(i=-this.cropperSettings.markerSizeMultiplier),this.verticalNeighbour.position.y<this.position.y&&(s=-this.cropperSettings.markerSizeMultiplier),this.cropperSettings.rounded){const t=this.position.x-this.horizontalNeighbour.position.x,e=this.position.y-this.verticalNeighbour.position.y,o=Math.round(Math.sin(Math.PI/2)*Math.abs(t/2))/4,r=Math.round(Math.sin(Math.PI/2)*Math.abs(e/2))/4;this.offset.x=i>0?o:-o,this.offset.y=s>0?r:-r}else this.offset.x=0,this.offset.y=0;t.beginPath(),this.cropperSettings.cropperDrawSettings.lineDash&&t.setLineDash([1,3]),t.moveTo(this.position.x+this.offset.x,this.position.y+this.offset.y),t.lineTo(this.position.x+this.offset.x+e*i,this.position.y+this.offset.y),t.lineTo(this.position.x+this.offset.x+e*i,this.position.y+this.offset.y+e*s),t.lineTo(this.position.x+this.offset.x,this.position.y+this.offset.y+e*s),t.lineTo(this.position.x+this.offset.x,this.position.y+this.offset.y),t.closePath(),t.fillStyle=this.cropperSettings.cropperDrawSettings.fillColor||"rgba(255,255,255,.7)",t.fill()}moveX(t){this.setPosition(t,this.position.y)}moveY(t){this.setPosition(this.position.x,t)}move(t,e){this.setPosition(t,e),this.verticalNeighbour.moveX(t),this.horizontalNeighbour.moveY(e)}addHorizontalNeighbour(t){this.horizontalNeighbour=t}addVerticalNeighbour(t){this.verticalNeighbour=t}getHorizontalNeighbour(){return this.horizontalNeighbour}getVerticalNeighbour(){return this.verticalNeighbour}draw(t){this.drawCornerFill(t),this.drawCornerBorder(t)}}class w{constructor(t=0,e=0,i=0){this.id=i,this.x=t,this.y=e}}class C extends m{constructor(t,e,i,s){super(t,e,i,s),this.iconPoints=[],this.scaledIconPoints=[],this.getDragIconPoints(this.iconPoints,1),this.getDragIconPoints(this.scaledIconPoints,1.2)}draw(t){this.drawIcon(t,this.over||this.drag?this.scaledIconPoints:this.iconPoints)}getDragIconPoints(t,e){const i=17*e,s=14*e,o=8*e,r=4*e;t.push((new d).instance.borrow(-r/2,i-o)),t.push((new d).instance.borrow(-s/2,i-o)),t.push((new d).instance.borrow(0,i)),t.push((new d).instance.borrow(s/2,i-o)),t.push((new d).instance.borrow(r/2,i-o)),t.push((new d).instance.borrow(r/2,r/2)),t.push((new d).instance.borrow(i-o,r/2)),t.push((new d).instance.borrow(i-o,s/2)),t.push((new d).instance.borrow(i,0)),t.push((new d).instance.borrow(i-o,-s/2)),t.push((new d).instance.borrow(i-o,-r/2)),t.push((new d).instance.borrow(r/2,-r/2)),t.push((new d).instance.borrow(r/2,-i+o)),t.push((new d).instance.borrow(s/2,-i+o)),t.push((new d).instance.borrow(0,-i)),t.push((new d).instance.borrow(-s/2,-i+o)),t.push((new d).instance.borrow(-r/2,-i+o)),t.push((new d).instance.borrow(-r/2,-r/2)),t.push((new d).instance.borrow(-i+o,-r/2)),t.push((new d).instance.borrow(-i+o,-s/2)),t.push((new d).instance.borrow(-i,0)),t.push((new d).instance.borrow(-i+o,s/2)),t.push((new d).instance.borrow(-i+o,r/2)),t.push((new d).instance.borrow(-r/2,r/2))}drawIcon(t,e){if(this.cropperSettings.showCenterMarker){t.beginPath(),t.moveTo(e[0].x+this.position.x,e[0].y+this.position.y);for(const i of e)t.lineTo(i.x+this.position.x,i.y+this.position.y);t.closePath(),t.fillStyle=this.cropperSettings.cropperDrawSettings.dragIconFillColor,t.fill(),t.lineWidth=this.cropperSettings.cropperDrawSettings.dragIconStrokeWidth,t.strokeStyle=this.cropperSettings.cropperDrawSettings.dragIconStrokeColor,t.stroke()}}recalculatePosition(t){const e=t.getCentre();this.setPosition(e.x,e.y),(new d).instance.returnPoint(e)}}class S{constructor(){this.share={}}setPressed(t){this.pressed=t}setReleased(t){}setOver(t){this.over=t}setStyle(t,e){}}class v extends class{}{constructor(t){super(),this.imageCropperDataShare=new S;const e=t.width,i=t.height,s=t.keepAspect,o=t.touchRadius,r=t.centerTouchRadius,n=t.minWidth,a=t.minHeight,h=t.croppedWidth,c=t.croppedHeight;this.cropperSettings=t,this.crop=this,this.x=0,this.y=0,this.canvasHeight=t.canvasHeight,this.canvasWidth=t.canvasWidth,this.width=e,void 0===e&&(this.width=100),this.height=i,void 0===i&&(this.height=50),this.keepAspect=s,void 0===s&&(this.keepAspect=!0),this.touchRadius=o,void 0===o&&(this.touchRadius=20),this.minWidth=n,this.minHeight=a,this.aspectRatio=0,this.currentDragTouches=[],this.isMouseDown=!1,this.ratioW=1,this.ratioH=1,this.fileType=t.fileType,this.imageSet=!1,this.pointPool=new d(200),this.tl=new f(0,0,o,this.cropperSettings),this.tr=new f(0+e,0,o,this.cropperSettings),this.bl=new f(0,0+i,o,this.cropperSettings),this.br=new f(0+e,0+i,o,this.cropperSettings),this.tl.addHorizontalNeighbour(this.tr),this.tl.addVerticalNeighbour(this.bl),this.tr.addHorizontalNeighbour(this.tl),this.tr.addVerticalNeighbour(this.br),this.bl.addHorizontalNeighbour(this.br),this.bl.addVerticalNeighbour(this.tl),this.br.addHorizontalNeighbour(this.bl),this.br.addVerticalNeighbour(this.tr),this.markers=[this.tl,this.tr,this.bl,this.br],this.center=new C(0+e/2,0+i/2,r,this.cropperSettings),this.aspectRatio=i/e,this.croppedImage=new Image,this.currentlyInteracting=!1,this.cropWidth=h,this.cropHeight=c}sign(t){return+t===t?0===t?t:t>0?1:-1:NaN}getMousePos(t,e){const i=t.getBoundingClientRect();return(new d).instance.borrow(e.clientX-i.left,e.clientY-i.top)}getTouchPos(t,e){const i=t.getBoundingClientRect();return(new d).instance.borrow(e.clientX-i.left,e.clientY-i.top)}detectVerticalSquash(t){const e=t.height,i=document.createElement("canvas");i.width=1,i.height=e;const s=i.getContext("2d");s.drawImage(t,0,0);const o=s.getImageData(0,0,1,e);if(o){const t=o.data;let i=0,s=e,r=e;for(;r>i;)0===t[4*(r-1)+3]?s=r:i=r,r=s+i>>1;const n=r/e;return 0===n?1:n}return 1}getDataUriMimeType(t){const e=t.substring(0,50);let i="image/png";const s=RegExp(/^(data:)([\w\/\+]+);(charset=[\w-]+|base64).*,(.*)/gi).exec(e);return s&&s[2]&&(i=s[2],"image/jpg"===i&&(i="image/jpeg")),i}prepare(t){this.buffer=document.createElement("canvas"),this.cropCanvas=document.createElement("canvas");const e=t.parentElement?t.parentElement.clientWidth:0;e>0&&this.cropperSettings.dynamicSizing?(this.cropCanvas.width=e,this.buffer.width=e,t.width=e):(this.cropCanvas.width=this.cropWidth,this.buffer.width=t.width),this.cropCanvas.height=this.cropHeight,this.buffer.height=t.height,this.canvas=t,this.ctx=this.canvas.getContext("2d"),this.draw(this.ctx)}updateSettings(t){this.cropperSettings=t}resizeCanvas(t,e,i=!1){this.canvas.width=this.cropCanvas.width=this.width=this.canvasWidth=this.buffer.width=t,this.canvas.height=this.cropCanvas.height=this.height=this.canvasHeight=this.buffer.height=e,i&&this.setImage(this.srcImage)}reset(){this.setImage(void 0)}draw(t){const e=this.getBounds();if(this.srcImage){t.clearRect(0,0,this.canvasWidth,this.canvasHeight);const i=this.srcImage.height/this.srcImage.width,s=this.canvasHeight/this.canvasWidth;let o,r=this.canvasWidth,n=this.canvasHeight;s>i?(r=this.canvasWidth,n=this.canvasWidth*i):(n=this.canvasHeight,r=this.canvasHeight/i),this.ratioW=r/this.srcImage.width,this.ratioH=n/this.srcImage.height,s<i?this.drawImageIOSFix(t,this.srcImage,0,0,this.srcImage.width,this.srcImage.height,this.buffer.width/2-r/2,0,r,n):this.drawImageIOSFix(t,this.srcImage,0,0,this.srcImage.width,this.srcImage.height,0,this.buffer.height/2-n/2,r,n),this.buffer.getContext("2d").drawImage(this.canvas,0,0,this.canvasWidth,this.canvasHeight),t.lineWidth=this.cropperSettings.cropperDrawSettings.strokeWidth,t.strokeStyle=this.cropperSettings.cropperDrawSettings.strokeColor,t.fillStyle=this.cropperSettings.cropperDrawSettings.backgroundFillColor,this.cropperSettings.rounded?(t.fillRect(0,0,this.canvas.width,this.canvas.height),t.save(),t.beginPath(),t.arc(e.left+e.width/2,e.top+e.height/2,e.width/2,0,2*Math.PI),t.stroke(),t.clip(),s<i?this.drawImageIOSFix(t,this.srcImage,0,0,this.srcImage.width,this.srcImage.height,this.buffer.width/2-r/2,0,r,n):this.drawImageIOSFix(t,this.srcImage,0,0,this.srcImage.width,this.srcImage.height,0,this.buffer.height/2-n/2,r,n),t.restore()):(t.fillRect(0,0,this.canvasWidth,this.canvasHeight),t.drawImage(this.buffer,e.left,e.top,Math.max(e.width,1),Math.max(e.height,1),e.left,e.top,e.width,e.height),t.strokeRect(e.left,e.top,e.width,e.height));for(let e=0;e<this.markers.length;e++)o=this.markers[e],o.draw(t);this.center.draw(t)}else t.fillStyle="rgba(192,192,192,1)",t.fillRect(0,0,this.canvas.width,this.canvas.height)}dragCenter(t,e,i){const s=this.getBounds(),o=t-s.width/2,r=e+s.height/2;t+s.width/2>=this.maxXClamp&&(t=this.maxXClamp-s.width/2),o<=this.minXClamp&&(t=s.width/2+this.minXClamp),e-s.height/2<this.minYClamp&&(e=s.height/2+this.minYClamp),r>=this.maxYClamp&&(e=this.maxYClamp-s.height/2),this.tl.moveX(t-s.width/2),this.tl.moveY(e-s.height/2),this.tr.moveX(t+s.width/2),this.tr.moveY(e-s.height/2),this.bl.moveX(t-s.width/2),this.bl.moveY(e+s.height/2),this.br.moveX(t+s.width/2),this.br.moveY(e+s.height/2),i.setPosition(t,e)}enforceMinSize(t,e,i){const s=t-i.getHorizontalNeighbour().position.x,o=e-i.getVerticalNeighbour().position.y,r=this.minWidth-Math.abs(s),n=this.minHeight-Math.abs(o);return 0===s||0===o?(t=i.position.x,e=i.position.y,(new d).instance.borrow(t,e)):(this.keepAspect?r>0&&n/this.aspectRatio>0?r>n/this.aspectRatio?s<0?(t-=r,o<0?e-=r*this.aspectRatio:e+=r*this.aspectRatio):(t+=r,o<0?e-=r*this.aspectRatio:e+=r*this.aspectRatio):o<0?(e-=n,s<0?t-=n/this.aspectRatio:t+=n/this.aspectRatio):(e+=n,s<0?t-=n/this.aspectRatio:t+=n/this.aspectRatio):r>0?s<0?(t-=r,o<0?e-=r*this.aspectRatio:e+=r*this.aspectRatio):(t+=r,o<0?e-=r*this.aspectRatio:e+=r*this.aspectRatio):n>0&&(o<0?(e-=n,s<0?t-=n/this.aspectRatio:t+=n/this.aspectRatio):(e+=n,s<0?t-=n/this.aspectRatio:t+=n/this.aspectRatio)):(r>0&&(s<0?t-=r:t+=r),n>0&&(o<0?e-=n:e+=n)),(t<this.minXClamp||t>this.maxXClamp||e<this.minYClamp||e>this.maxYClamp)&&(t=i.position.x,e=i.position.y),(new d).instance.borrow(t,e))}dragCorner(t,e,i){let s,o=0,r=0,n=0,a=0,h=0,c=0,p=0,g=0,l=0;if(this.keepAspect){if(s=i.getHorizontalNeighbour().getVerticalNeighbour(),n=s.position.x,a=s.position.y,t<=s.position.x){if(e<=s.position.y){if(o=n-100/this.aspectRatio,r=a-100/this.aspectRatio*this.aspectRatio,l=this.getSide((new d).instance.borrow(o,r),s.position,(new d).instance.borrow(t,e)),l>0){h=Math.abs(s.position.y-e),c=h/this.aspectRatio,p=s.position.y-h,g=s.position.x-c;const t=this.enforceMinSize(g,p,i);i.move(t.x,t.y),(new d).instance.returnPoint(t)}else if(l<0){c=Math.abs(s.position.x-t),h=c*this.aspectRatio,p=s.position.y-h,g=s.position.x-c;const e=this.enforceMinSize(g,p,i);i.move(e.x,e.y),(new d).instance.returnPoint(e)}}else if(o=n-100/this.aspectRatio,r=a+100/this.aspectRatio*this.aspectRatio,l=this.getSide((new d).instance.borrow(o,r),s.position,(new d).instance.borrow(t,e)),l>0){c=Math.abs(s.position.x-t),h=c*this.aspectRatio,p=s.position.y+h,g=s.position.x-c;const e=this.enforceMinSize(g,p,i);i.move(e.x,e.y),(new d).instance.returnPoint(e)}else if(l<0){h=Math.abs(s.position.y-e),c=h/this.aspectRatio,p=s.position.y+h,g=s.position.x-c;const t=this.enforceMinSize(g,p,i);i.move(t.x,t.y),(new d).instance.returnPoint(t)}}else if(e<=s.position.y){if(o=n+100/this.aspectRatio,r=a-100/this.aspectRatio*this.aspectRatio,l=this.getSide((new d).instance.borrow(o,r),s.position,(new d).instance.borrow(t,e)),l<0){h=Math.abs(s.position.y-e),c=h/this.aspectRatio,p=s.position.y-h,g=s.position.x+c;const t=this.enforceMinSize(g,p,i);i.move(t.x,t.y),(new d).instance.returnPoint(t)}else if(l>0){c=Math.abs(s.position.x-t),h=c*this.aspectRatio,p=s.position.y-h,g=s.position.x+c;const e=this.enforceMinSize(g,p,i);i.move(e.x,e.y),(new d).instance.returnPoint(e)}}else if(o=n+100/this.aspectRatio,r=a+100/this.aspectRatio*this.aspectRatio,l=this.getSide((new d).instance.borrow(o,r),s.position,(new d).instance.borrow(t,e)),l<0){c=Math.abs(s.position.x-t),h=c*this.aspectRatio,p=s.position.y+h,g=s.position.x+c;const e=this.enforceMinSize(g,p,i);i.move(e.x,e.y),(new d).instance.returnPoint(e)}else if(l>0){h=Math.abs(s.position.y-e),c=h/this.aspectRatio,p=s.position.y+h,g=s.position.x+c;const t=this.enforceMinSize(g,p,i);i.move(t.x,t.y),(new d).instance.returnPoint(t)}}else{const s=this.enforceMinSize(t,e,i);i.move(s.x,s.y),(new d).instance.returnPoint(s)}this.center.recalculatePosition(this.getBounds())}getSide(t,e,i){const s=this.sign((e.x-t.x)*(i.y-t.y)-(e.y-t.y)*(i.x-t.x));return(new d).instance.returnPoint(t),(new d).instance.returnPoint(i),s}handleRelease(t){if(null==t)return;let e=0;for(let i=0;i<this.currentDragTouches.length;i++)t.id===this.currentDragTouches[i].id&&(this.currentDragTouches[i].dragHandle.setDrag(!1),e=i);this.currentDragTouches.splice(e,1),this.draw(this.ctx)}handleMove(t){let e=!1;for(let i=0;i<this.currentDragTouches.length;i++)if(t.id===this.currentDragTouches[i].id&&null!=this.currentDragTouches[i].dragHandle){const s=this.currentDragTouches[i],o=this.clampPosition(t.x-s.dragHandle.offset.x,t.y-s.dragHandle.offset.y);t.x=o.x,t.y=o.y,(new d).instance.returnPoint(o),s.dragHandle instanceof f?this.dragCorner(t.x,t.y,s.dragHandle):this.dragCenter(t.x,t.y,s.dragHandle),this.currentlyInteracting=!0,e=!0,this.imageCropperDataShare.setPressed(this.canvas);break}if(!e){for(const e of this.markers)if(e.touchInBounds(t.x,t.y)){t.dragHandle=e,this.currentDragTouches.push(t),e.setDrag(!0),t.dragHandle.offset.x=t.x-t.dragHandle.position.x,t.dragHandle.offset.y=t.y-t.dragHandle.position.y,this.dragCorner(t.x-t.dragHandle.offset.x,t.y-t.dragHandle.offset.y,t.dragHandle);break}null==t.dragHandle&&this.center.touchInBounds(t.x,t.y)&&(t.dragHandle=this.center,this.currentDragTouches.push(t),t.dragHandle.setDrag(!0),t.dragHandle.offset.x=t.x-t.dragHandle.position.x,t.dragHandle.offset.y=t.y-t.dragHandle.position.y,this.dragCenter(t.x-t.dragHandle.offset.x,t.y-t.dragHandle.offset.y,t.dragHandle))}}updateClampBounds(){const t=this.srcImage.height/this.srcImage.width;let e=this.canvas.width,i=this.canvas.height;this.canvas.height/this.canvas.width>t?(e=this.canvas.width,i=this.canvas.width*t):(i=this.canvas.height,e=this.canvas.height/t),this.minXClamp=this.canvas.width/2-e/2,this.minYClamp=this.canvas.height/2-i/2,this.maxXClamp=this.canvas.width/2+e/2,this.maxYClamp=this.canvas.height/2+i/2}getCropBounds(){const t=this.getBounds();return t.top=Math.round((t.top-this.minYClamp)/this.ratioH),t.bottom=Math.round((t.bottom-this.minYClamp)/this.ratioH),t.left=Math.round((t.left-this.minXClamp)/this.ratioW),t.right=Math.round((t.right-this.minXClamp)/this.ratioW),t}clampPosition(t,e){return t<this.minXClamp&&(t=this.minXClamp),t>this.maxXClamp&&(t=this.maxXClamp),e<this.minYClamp&&(e=this.minYClamp),e>this.maxYClamp&&(e=this.maxYClamp),(new d).instance.borrow(t,e)}isImageSet(){return this.imageSet}setImage(t){if(this.srcImage=t,t){this.imageSet=!0,this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.buffer.getContext("2d").clearRect(0,0,this.buffer.width,this.buffer.height),this.cropperSettings.fileType||(this.fileType=this.getDataUriMimeType(t.src)),this.cropperSettings.minWithRelativeToResolution&&(this.minWidth=this.canvas.width*this.cropperSettings.minWidth/this.srcImage.width,this.minHeight=this.canvas.height*this.cropperSettings.minHeight/this.srcImage.height),this.updateClampBounds(),this.canvasWidth=this.canvas.width,this.canvasHeight=this.canvas.height;const e=this.getCropPositionFromMarkers();this.setCropPosition(e)}else this.imageSet=!1,this.draw(this.ctx)}updateCropPosition(t){const e=this.getCropPositionFromBounds(t);this.setCropPosition(e)}setCropPosition(t){this.tl.setPosition(t[0].x,t[0].y),this.tr.setPosition(t[1].x,t[1].y),this.bl.setPosition(t[2].x,t[2].y),this.br.setPosition(t[3].x,t[3].y),this.center.setPosition(t[4].x,t[4].y);for(const e of t)(new d).instance.returnPoint(e);this.vertSquashRatio=this.detectVerticalSquash(this.srcImage),this.draw(this.ctx),this.croppedImage=this.getCroppedImageHelper(!1,this.cropWidth,this.cropHeight)}getCropPositionFromMarkers(){const t=this.canvas.width,e=this.canvas.height;let i,s,o,r,n;const a=this.srcImage.height/this.srcImage.width,h=this.getBounds(),c=h.height/h.width,p=this.canvas.width/2,g=this.canvas.height/2;if(c>a){const n=Math.min(t*a,e),h=n/c;i=(new d).instance.borrow(p-h/2,g+n/2),s=(new d).instance.borrow(p+h/2,g+n/2),o=(new d).instance.borrow(p-h/2,g-n/2),r=(new d).instance.borrow(p+h/2,g-n/2)}else{const n=Math.min(e/a,t),h=n*c;i=(new d).instance.borrow(p-n/2,g+h/2),s=(new d).instance.borrow(p+n/2,g+h/2),o=(new d).instance.borrow(p-n/2,g-h/2),r=(new d).instance.borrow(p+n/2,g-h/2)}return n=(new d).instance.borrow(p,g),[i,s,o,r,n]}getCropPositionFromBounds(t){let e=0,i=0;const s=this.srcImage.height/this.srcImage.width;this.canvasHeight/this.canvasWidth>s?e=this.buffer.height/2-this.canvasWidth*s/2:i=this.buffer.width/2-this.canvasHeight/s/2;const o=(this.canvasWidth-2*i)/this.srcImage.width,r=(this.canvasHeight-2*e)/this.srcImage.height;let n=t.height*r,a=t.width*o;const h=t.left*o+i,c=t.top*r+e;if(this.keepAspect){const e=n/this.aspectRatio,i=a*this.aspectRatio;this.getCropBounds().height===t.height?n=i:this.getCropBounds().width===t.width||Math.abs(i-n)<Math.abs(e-a)?a=e:n=i}return[(new d).instance.borrow(h,c+n),(new d).instance.borrow(h+a,c+n),(new d).instance.borrow(h,c),(new d).instance.borrow(h+a,c),(new d).instance.borrow(h+a/2,c+n/2)]}getCroppedImageHelper(t,e,i){return this.cropperSettings.cropOnResize?this.getCroppedImage(t,e,i):this.croppedImage?this.croppedImage:document.createElement("img")}getCroppedImage(t,e,i){const s=this.getBounds();if(this.srcImage){const e=this.srcImage.height/this.srcImage.width,i=this.canvas.height/this.canvas.width;let o=this.canvas.width,r=this.canvas.height;i>e?(o=this.canvas.width,r=this.canvas.width*e):i<e?(r=this.canvas.height,o=this.canvas.height/e):(r=this.canvas.height,o=this.canvas.width),this.ratioW=o/this.srcImage.width,this.ratioH=r/this.srcImage.height;const n=(this.buffer.height-r)/2/this.ratioH,a=(this.buffer.width-o)/2/this.ratioW,h=this.cropCanvas.getContext("2d");if(this.cropperSettings.preserveSize||t){const t=Math.round(s.right/this.ratioW-s.left/this.ratioW),e=Math.round(s.bottom/this.ratioH-s.top/this.ratioH);this.cropCanvas.width=t,this.cropCanvas.height=e,this.cropperSettings.croppedWidth=this.cropCanvas.width,this.cropperSettings.croppedHeight=this.cropCanvas.height}else this.cropCanvas.width=this.cropWidth,this.cropCanvas.height=this.cropHeight;return h.clearRect(0,0,this.cropCanvas.width,this.cropCanvas.height),this.drawImageIOSFix(h,this.srcImage,Math.max(Math.round(s.left/this.ratioW-a),0),Math.max(Math.round(s.top/this.ratioH-n),0),Math.max(Math.round(s.width/this.ratioW),1),Math.max(Math.round(s.height/this.ratioH),1),0,0,this.cropCanvas.width,this.cropCanvas.height),this.cropperSettings.resampleFn&&this.cropperSettings.resampleFn(this.cropCanvas),this.croppedImage.width=this.cropCanvas.width,this.croppedImage.height=this.cropCanvas.height,this.croppedImage.src=this.cropCanvas.toDataURL(this.fileType,this.cropperSettings.compressRatio),this.croppedImage}return document.createElement("img")}getBounds(){let t=Number.MAX_VALUE,e=Number.MAX_VALUE,i=-Number.MAX_VALUE,s=-Number.MAX_VALUE;for(const r of this.markers)r.position.x<t&&(t=r.position.x),r.position.x>i&&(i=r.position.x),r.position.y<e&&(e=r.position.y),r.position.y>s&&(s=r.position.y);const o=new u;return o.left=t,o.right=i,o.top=e,o.bottom=s,o}setBounds(t){const e=this.getBounds();for(const i of this.markers)i.setPosition(i.position.x===e.left?t.left:t.right,i.position.y===e.top?t.top:t.bottom);this.center.recalculatePosition(t),this.center.draw(this.ctx),this.draw(this.ctx)}onTouchMove(t){if(this.crop.isImageSet()){if(1===t.touches.length){if(this.isMouseDown){t.preventDefault();for(let e=0;e<t.touches.length;e++){const i=t.touches[e],s=this.getTouchPos(this.canvas,i),o=new w(s.x,s.y,i.identifier);(new d).instance.returnPoint(s),this.move(o)}}}else if(2===t.touches.length){t.preventDefault();const e=(t.touches[0].clientX-t.touches[1].clientX)*(t.touches[0].clientX-t.touches[1].clientX)+(t.touches[0].clientY-t.touches[1].clientY)*(t.touches[0].clientY-t.touches[1].clientY);if(this.previousDistance&&this.previousDistance!==e){const t=this.getBounds();e<this.previousDistance&&(t.top+=1,t.left+=1,t.right-=1,t.bottom-=1),e>this.previousDistance&&(t.top!==this.minYClamp&&t.bottom!==this.maxYClamp&&t.left!==this.minXClamp&&t.right!==this.maxXClamp?(t.top-=1,t.left-=1,t.right+=1,t.bottom+=1):t.top!==this.minYClamp&&t.bottom!==this.maxYClamp&&t.left===this.minXClamp&&t.right!==this.maxXClamp?(t.top-=1,t.right+=2,t.bottom+=1):t.top!==this.minYClamp&&t.bottom!==this.maxYClamp&&t.left!==this.minXClamp&&t.right===this.maxXClamp?(t.top-=1,t.left-=2,t.bottom+=1):t.top===this.minYClamp&&t.bottom!==this.maxYClamp&&t.left!==this.minXClamp&&t.right!==this.maxXClamp?(t.left-=1,t.right+=1,t.bottom+=2):t.top!==this.minYClamp&&t.bottom===this.maxYClamp&&t.left!==this.minXClamp&&t.right!==this.maxXClamp?(t.top-=2,t.left-=1,t.right+=1):t.top===this.minYClamp&&t.bottom!==this.maxYClamp&&t.left===this.minXClamp&&t.right!==this.maxXClamp?(t.right+=2,t.bottom+=2):t.top===this.minYClamp&&t.bottom!==this.maxYClamp&&t.left!==this.minXClamp&&t.right===this.maxXClamp?(t.left-=2,t.bottom+=2):t.top!==this.minYClamp&&t.bottom===this.maxYClamp&&t.left===this.minXClamp&&t.right!==this.maxXClamp?(t.top-=2,t.right+=2):t.top!==this.minYClamp&&t.bottom===this.maxYClamp&&t.left!==this.minXClamp&&t.right===this.maxXClamp&&(t.top-=2,t.left-=2)),t.top<this.minYClamp&&(t.top=this.minYClamp),t.bottom>this.maxYClamp&&(t.bottom=this.maxYClamp),t.left<this.minXClamp&&(t.left=this.minXClamp),t.right>this.maxXClamp&&(t.right=this.maxXClamp),this.setBounds(t)}this.previousDistance=e}this.draw(this.ctx)}}onMouseMove(t){if(this.crop.isImageSet()&&this.isMouseDown){const e=this.getMousePos(this.canvas,t);this.move(new w(e.x,e.y,0));let i=this.getDragTouchForID(0);i?(i.x=e.x,i.y=e.y):i=new w(e.x,e.y,0),(new d).instance.returnPoint(e),this.drawCursors(i),this.draw(this.ctx)}}move(t){this.isMouseDown&&this.handleMove(t)}getDragTouchForID(t){for(let e=0;e<this.currentDragTouches.length;e++)if(t===this.currentDragTouches[e].id)return this.currentDragTouches[e]}drawCursors(t){let e=!1;null!=t&&(t.dragHandle===this.center&&(this.imageCropperDataShare.setStyle(this.canvas,"move"),e=!0),null!==t.dragHandle&&t.dragHandle instanceof f&&(this.drawCornerCursor(t.dragHandle,t.dragHandle.position.x,t.dragHandle.position.y),e=!0));let i=!1;if(!e){for(let e=0;e<this.markers.length;e++)i=i||this.drawCornerCursor(this.markers[e],t.x,t.y);i||this.imageCropperDataShare.setStyle(this.canvas,"initial")}i||e||!this.center.touchInBounds(t.x,t.y)?this.center.setOver(!1):(this.center.setOver(!0),this.imageCropperDataShare.setOver(this.canvas),this.imageCropperDataShare.setStyle(this.canvas,"move"))}drawCornerCursor(t,e,i){return t.touchInBounds(e,i)?(t.setOver(!0),t.getHorizontalNeighbour().position.x>t.position.x?t.getVerticalNeighbour().position.y>t.position.y?(this.imageCropperDataShare.setOver(this.canvas),this.imageCropperDataShare.setStyle(this.canvas,"nwse-resize")):(this.imageCropperDataShare.setOver(this.canvas),this.imageCropperDataShare.setStyle(this.canvas,"nesw-resize")):t.getVerticalNeighbour().position.y>t.position.y?(this.imageCropperDataShare.setOver(this.canvas),this.imageCropperDataShare.setStyle(this.canvas,"nesw-resize")):(this.imageCropperDataShare.setOver(this.canvas),this.imageCropperDataShare.setStyle(this.canvas,"nwse-resize")),!0):(t.setOver(!1),!1)}onTouchStart(t){if(this.crop.isImageSet()){const e=t.touches[0],i=this.getTouchPos(this.canvas,e),s=new w(i.x,i.y,e.identifier);(new d).instance.returnPoint(i),this.isMouseDown=!1;for(const t of this.markers)t.touchInBounds(s.x,s.y)&&(this.isMouseDown=!0);this.center.touchInBounds(s.x,s.y)&&(this.isMouseDown=!0)}}onTouchEnd(t){if(this.crop.isImageSet()){for(let e=0;e<t.changedTouches.length;e++){const i=this.getDragTouchForID(t.changedTouches[e].identifier);i&&void 0!==i&&((i.dragHandle instanceof f||i.dragHandle instanceof C)&&i.dragHandle.setOver(!1),this.handleRelease(i))}0===this.currentDragTouches.length&&(this.isMouseDown=!1,this.currentlyInteracting=!1)}}drawImageIOSFix(t,e,i,s,o,r,n,a,h,c){t.drawImage(e,i,s,o,r,n,a,h,c)}onMouseDown(t){this.crop.isImageSet()&&(this.isMouseDown=!0)}onMouseUp(t){this.crop.isImageSet()&&(this.imageCropperDataShare.setReleased(this.canvas),this.isMouseDown=!1,this.handleRelease(new w(0,0,0)))}}class b{constructor(t=0,e=0,i=0,s=0){this.x=+t,this.y=+e,this.w=+i,this.h=+s}toBounds(){return new u(this.x,this.y,this.w,this.h)}isInitialized(){return 0!==this.x&&0!==this.y&&0!==this.w&&0!==this.h}}let y=(()=>{let t=class{constructor(t,e){this.document=e,this.cropPositionChange=new s.EventEmitter,this.exif=new g,this.onCrop=new s.EventEmitter,this.imageSet=new s.EventEmitter,this.dragUnsubscribers=[],this.renderer=t}ngAfterViewInit(){const t=this.cropcanvas.nativeElement;this.settings||(this.settings=new c),this.settings.cropperClass&&this.renderer.setAttribute(t,"class",this.settings.cropperClass),this.settings.dynamicSizing?(this.windowListener=this.resize.bind(this),window.addEventListener("resize",this.windowListener)):(this.renderer.setAttribute(t,"width",this.settings.canvasWidth.toString()),this.renderer.setAttribute(t,"height",this.settings.canvasHeight.toString())),this.cropper||(this.cropper=new v(this.settings)),this.cropper.prepare(t)}ngOnChanges(t){if(this.isCropPositionChanged(t)){if(this.cropper.updateCropPosition(this.cropPosition.toBounds()),this.cropper.isImageSet()){const t=this.cropper.getCropBounds();this.image.image=this.cropper.getCroppedImageHelper().src,this.onCrop.emit(t)}this.updateCropBounds()}t.inputImage&&this.setImage(t.inputImage.currentValue),t.settings&&this.cropper&&(this.cropper.updateSettings(this.settings),this.cropper.isImageSet()&&(this.image.image=this.cropper.getCroppedImageHelper().src,this.onCrop.emit(this.cropper.getCropBounds())))}ngOnDestroy(){this.removeDragListeners(),this.settings.dynamicSizing&&this.windowListener&&window.removeEventListener("resize",this.windowListener)}onTouchMove(t){this.cropper.onTouchMove(t)}onTouchStart(t){this.cropper.onTouchStart(t)}onTouchEnd(t){this.cropper.onTouchEnd(t),this.cropper.isImageSet()&&(this.image.image=this.cropper.getCroppedImageHelper().src,this.onCrop.emit(this.cropper.getCropBounds()),this.updateCropBounds())}onMouseDown(t){this.dragUnsubscribers.push(this.renderer.listen(this.document,"mousemove",this.onMouseMove.bind(this))),this.dragUnsubscribers.push(this.renderer.listen(this.document,"mouseup",this.onMouseUp.bind(this))),this.cropper.onMouseDown(t)}removeDragListeners(){this.dragUnsubscribers.forEach(t=>t())}onMouseUp(t){this.removeDragListeners(),this.cropper.isImageSet()&&(this.cropper.onMouseUp(t),this.image.image=this.cropper.getCroppedImageHelper().src,this.onCrop.emit(this.cropper.getCropBounds()),this.updateCropBounds())}onMouseMove(t){this.cropper.onMouseMove(t)}fileChangeListener(t){if(0===t.target.files.length)return;const e=t.target.files[0];if(this.settings.allowedFilesRegex.test(e.name)){const t=new Image,i=new FileReader;i.addEventListener("loadend",e=>{t.addEventListener("load",()=>{this.setImage(t)}),t.src=e.target.result}),i.readAsDataURL(e)}}resize(){const t=this.cropcanvas.nativeElement;this.settings.canvasWidth=t.offsetWidth,this.settings.canvasHeight=t.offsetHeight,this.cropper.resizeCanvas(t.offsetWidth,t.offsetHeight,!0)}reset(){this.cropper.reset(),this.renderer.setAttribute(this.cropcanvas.nativeElement,"class",this.settings.cropperClass),this.image.image=this.cropper.getCroppedImageHelper().src}setImage(t,e=null){this.imageSet.emit(!0),this.renderer.setAttribute(this.cropcanvas.nativeElement,"class",`${this.settings.cropperClass} ${this.settings.croppingClass}`),this.raf=window.requestAnimationFrame(()=>{this.raf&&window.cancelAnimationFrame(this.raf),t.naturalHeight>0&&t.naturalWidth>0&&(t.height=t.naturalHeight,t.width=t.naturalWidth,window.cancelAnimationFrame(this.raf),this.getOrientedImage(t,i=>{if(this.settings.dynamicSizing){const t=this.cropcanvas.nativeElement;this.settings.canvasWidth=t.offsetWidth,this.settings.canvasHeight=t.offsetHeight,this.cropper.resizeCanvas(t.offsetWidth,t.offsetHeight,!1)}this.cropper.setImage(i),this.cropPosition&&this.cropPosition.isInitialized()&&this.cropper.updateCropPosition(this.cropPosition.toBounds()),this.image.original=i;let s=this.cropper.getCropBounds();this.image.image=this.cropper.getCroppedImageHelper().src,this.image||(this.image=t),null!=e&&(s=e,this.cropper.setBounds(s),this.cropper.updateCropPosition(s)),this.onCrop.emit(s)}))})}isCropPositionChanged(t){return!!(this.cropper&&t.cropPosition&&this.isCropPositionUpdateNeeded)||(this.isCropPositionUpdateNeeded=!0,!1)}updateCropBounds(){const t=this.cropper.getCropBounds();this.cropPositionChange.emit(new b(t.left,t.top,t.width,t.height)),this.isCropPositionUpdateNeeded=!1}getOrientedImage(t,e){let i;this.exif.getData(t,()=>{const s=this.exif.getTag(t,"Orientation");if([3,6,8].indexOf(s)>-1){const o=document.createElement("canvas"),r=o.getContext("2d");let n=t.width,a=t.height,h=0,c=0,p=0;switch(s){case 3:h=-t.width,c=-t.height,p=180;break;case 6:n=t.height,a=t.width,c=-t.height,p=90;break;case 8:n=t.height,a=t.width,h=-t.width,p=270}o.width=n,o.height=a,r.rotate(p*Math.PI/180),r.drawImage(t,h,c),i=document.createElement("img"),i.width=n,i.height=a,i.addEventListener("load",()=>{e(i)}),i.src=o.toDataURL("image/png")}else i=t,e(i)})}};return t.\u0275fac=function(e){return new(e||t)(s["\u0275\u0275directiveInject"](s.Renderer2),s["\u0275\u0275directiveInject"](o.e))},t.\u0275cmp=s["\u0275\u0275defineComponent"]({type:t,selectors:[["img-cropper"]],viewQuery:function(t,e){var i;1&t&&(s["\u0275\u0275staticViewQuery"](r,!0),s["\u0275\u0275viewQuery"](n,!0)),2&t&&(s["\u0275\u0275queryRefresh"](i=s["\u0275\u0275loadQuery"]())&&(e.cropcanvas=i.first),s["\u0275\u0275queryRefresh"](i=s["\u0275\u0275loadQuery"]())&&(e.fileInput=i.first))},inputs:{settings:"settings",cropper:"cropper",image:"image",inputImage:"inputImage",cropPosition:"cropPosition"},outputs:{cropPositionChange:"cropPositionChange",onCrop:"onCrop",imageSet:"imageSet"},features:[s["\u0275\u0275NgOnChangesFeature"]()],decls:4,vars:1,consts:[[1,"ng2-imgcrop"],["type","file","accept","image/*",3,"change",4,"ngIf"],[3,"mousedown","touchmove","touchend","touchstart"],["cropcanvas",""],["type","file","accept","image/*",3,"change"],["fileInput",""]],template:function(t,e){1&t&&(s["\u0275\u0275elementStart"](0,"span",0),s["\u0275\u0275template"](1,a,2,0,"input",1),s["\u0275\u0275elementStart"](2,"canvas",2,3),s["\u0275\u0275listener"]("mousedown",(function(t){return e.onMouseDown(t)}))("touchmove",(function(t){return e.onTouchMove(t)}))("touchend",(function(t){return e.onTouchEnd(t)}))("touchstart",(function(t){return e.onTouchStart(t)})),s["\u0275\u0275elementEnd"](),s["\u0275\u0275elementEnd"]()),2&t&&(s["\u0275\u0275advance"](1),s["\u0275\u0275property"]("ngIf",!e.settings.noFileInput))},directives:[o.p],encapsulation:2}),t})(),x=(()=>{let t=class{};return t.\u0275mod=s["\u0275\u0275defineNgModule"]({type:t}),t.\u0275inj=s["\u0275\u0275defineInjector"]({factory:function(e){return new(e||t)},imports:[[o.c]]}),t})()}}]);